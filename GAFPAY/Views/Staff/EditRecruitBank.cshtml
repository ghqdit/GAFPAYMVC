@model GAFPAY.ViewModel.RecruitBank
@{
    ViewBag.Title = "Edit Recruit Bank";
}


<div class="page-header">
    <h3 class="page-title"> @ViewBag.Title </h3>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">

            <li class="breadcrumb-item"> <a href="@Url.Action("Index","Home")"> Dashboard</a> </li>
            <li class="breadcrumb-item"> <a href="@Url.Action("IndexRecruit","Staff")"> Recruits </a> </li>
            <li class="breadcrumb-item active" aria-current="page">@ViewBag.Title</li>
        </ol>
    </nav>
</div>

<div class="main-page">
    <div class="row">
        <div class="col-md-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">

                    @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data", id = "NewFormX" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="row">

                            <div class="col-md-10 offset-1">

                                <div class="row">
                                    <div class="col-sm-4">
                                        <div class="input-field">
                                            @Html.LabelFor(model => model.BankNameID)
                                            @Html.DropDownListFor(model => model.BankNameID, Model.BankNameList, "Select Bank", htmlAttributes: new { @class = "form-control", onchange = "populateBankBranch(this)" })

                                        </div>
                                    </div>

                                    <div class="col-sm-4">
                                        <div class="input-field">
                                            @Html.LabelFor(model => model.BankID)
                                            @Html.DropDownListFor(model => model.BankID, new SelectList(Enumerable.Empty<SelectListItem>()), "Select Branch", htmlAttributes: new { @class = "form-control" })

                                        </div>
                                    </div>

                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-sm-8">
                                        <div class="input-field">
                                            @Html.LabelFor(model => model.AccountNumber)
                                            @Html.EditorFor(model => model.AccountNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "" } })

                                        </div>
                                    </div>
                                </div>


                                <br />
                                <br />
                                <br />

                                <div class="row">
                                    <div class="col-md-2 offset-md-10">

                                        <a class="btn btn-lg btn-primary pull-right" id="" onclick="sendForm()" style="color: white;background-color:blue;">Save</a>

                                    </div>

                                </div>
                            </div>
                        </div>

                    }
                </div>
            </div>
        </div>

    </div>
</div>
<script>
    function populateBankBranch(e) {
        var BankNameID = $('#BankNameID').val();

        var items = '<option value="">Select Branch </option>';
        if (BankNameID !== undefined) {
            $.post("@Url.Action("FillBankBranch", "Settings")" + "?id=" + BankNameID, function(data) {

                for (var i = 0; i < data.length; i++) {
                    items += "<option value='" + data[i].BANKID + "'>" + data[i].BANKBRANCH + "</option>";

                }
                $('#BankID').empty().append(items);
            });
        }
        //populateRecruitCourse(ServiceID);
    }

     
    function sendForm() {
        var form = $('#NewFormX').get(0);
        swal({
            title: "Save changes",
            text: "Are you sure you want to save?",
            type: "question",
            showCancelButton: true,
            confirmButtonColor: "#5cb85c",
            confirmButtonText: "Save ",
            closeOnConfirm: false,
            showLoaderOnConfirm: true,
            preConfirm: function () {
                return new Promise(function (resolve) {
                    $.ajax({
                        url: "@Url.Action("EditRecruitBank","Staff")",
                        type: 'POST',
                    data: new FormData(form),
                    dataType: 'json',
                    processData: false,
                    contentType: false,
                    })
                        .done(function(response) {
                            if (response.Success) {
                                swal({
                                    title: "Successful",
                                    text: response.Message + " saved successfully",
                                    type: "success",
                                    showCancelButton: false,
                                    confirmButtonColor: "#1E90FF",
                                    confirmButtonText: "OK",
                                    timer: 5000,
                                    // closeOnConfirm: true
                                }).then(function() {
                                    window.location.href = '@Url.Action("IndexRecruit", "Staff")';
                                });
                            }  else {
                                var error;
                                if (response.ErrorMessage) {
                                    error = response.ErrorMessage;
                                } else {
                                    error = "Error while processing. Please try again";
                                }
                                swal("Error", error, "error");
                                //swal("error", "error");
                            }


                        })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong with the processing. Try again !', 'error');
                    });
            });
    }



    }
         );
    }
      

</script>